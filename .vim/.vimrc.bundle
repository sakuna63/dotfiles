" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif


" ----------------------------------------------------------------------------------------
" neobundle
" ----------------------------------------------------------------------------------------

if(has("vim_starting"))
  if &compatible
    set nocompatible               " Be iMproved
  endif

  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'


"------------------------------------
" for edit
"------------------------------------

NeoBundle 'Shougo/neocomplete'
" AutoComplPopというプラグインを無効化する（競合するため）
let g:acp_enableAtStartup = 0
" 起動時にneocompleteを有効化する
let g:neocomplete#enable_at_startup = 1
" 大文字小文字を区別せずに補完する
let g:neocomplete#enable_smart_cast = 1
" シンタックスを記憶する最小の文字数（変数名などが３文字以上である場合に記憶される）
let g:neocomplete#sources#syntax#min_keyword_length = 3
" neocompleteを自動的にロック（使用しない？）バッファ名のパターンを指定する。ku.vimなどneocompleteと相性の悪いプラグインを避けるため
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" ファイルタイプごとに独自のディクショナリを追加する
let g:neocomplete#sources#dictionary#dictionaries = {
  \ 'default' : '',
  \ 'vimshell' : $HOME.'/.vimshell_hist',
  \ 'scheme' : $HOME.'/.gosh_completions'
    \ }

    " オリジナルのキーワードを定義する
    if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" 補完キャンセル
inoremap <expr><C-g>     neocomplete#undo_completion()
" 補完候補から共通する部分を補完する
inoremap <expr><C-l>     neocomplete#complete_common_string()
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
" 文字削除時にポップアップを閉じる<BS> = BackSpace
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" 現在選択している候補を確定する
inoremap <expr><C-y>  neocomplete#close_popup()
" 選択をキャンセルし、ポップアップを閉じる
inoremap <expr><ESC>  neocomplete#cancel_popup()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=nodejscomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'

NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
set conceallevel=2 concealcursor=i
endif

let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets, ~/.vim/snippets'

NeoBundle 'Shougo/unite.vim'
let g:unite_source_history_yank_enable = 1
if executable('ag')
  " Use ag in unite grep source.
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts =
    \ '-i -S --line-numbers --nogroup --hidden --ignore .git'
  let g:unite_source_grep_recursive_opt = ''
elseif executable('pt')
" Use pt in unite grep source.
" https://github.com/monochromegane/the_platinum_searcher
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '-i --nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
elseif executable('ack-grep')
  " Use ack in unite grep source.
  let g:unite_source_grep_command = 'ack-grep'
  let g:unite_source_grep_default_opts = '-i --no-heading --no-color -k -H'
  let g:unite_source_grep_recursive_opt = ''
endif

nnoremap [unite] <Nop>
nmap <Leader>u [unite]
nnoremap <silent> [unite]u :Unite -start-insert -buffer-name=files file_mru file/async file/new<CR>
nnoremap <silent> [unite]g :Unite -start-insert -buffer-name=files file_rec/async file/new<CR>
nnoremap <silent> [unite]c :UniteWithCurrentDir -start-insert -buffer-name=files file file_mru file/async file/new<CR>
nnoremap <silent> [unite]a :Unite -start-insert grep:./<CR>
nnoremap <silent> [unite]y :Unite -start-insert history/yank<CR>

NeoBundle 'Shougo/unite-outline'
nnoremap <silent> [unite]o :Unite -start-insert outline<CR>

NeoBundle 'Shougo/unite-help'
nnoremap <silent> [unite]h :Unite -start-insert help<CR>

NeoBundle 'kmnk/vim-unite-giti'

NeoBundle 'Shougo/vimfiler.vim'
nnoremap <silent> [unite]f :VimFiler<CR>

NeoBundle 'Shougo/junkfile.vim'
nnoremap <silent> [unite]j :Unite junkfile/new junkfile -start-insert<CR>

NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
    \ 'windows' : 'make -f make_mingw32.mak',
    \ 'cygwin' : 'make -f make_cygwin.mak',
    \ 'mac' : 'make -f make_mac.mak',
    \ 'unix' : 'make -f make_unix.mak',
  \ },
\ }
NeoBundle 'osyo-manga/vim-over'
nnoremap <silent> <Leader>s :OverCommandLine %s/<CR>
" replace word under cursor with highlight
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
" replace yanked string with highlight
nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>

NeoBundle 'tpope/vim-surround'
NeoBundle 'h1mesuke/vim-alignta'

NeoBundle 'bronson/vim-trailing-whitespace'
let g:extra_whitespace_ignored_filetypes = ['unite', 'markdown', 'help']

NeoBundle 'tomtom/tcomment_vim'
nnoremap <silent> <Leader>c :TComment<CR>
vnoremap <silent> <Leader>c :TComment<CR>

"------------------------------------
" for development
"------------------------------------

NeoBundle 'thinca/vim-quickrun'
nnoremap <silent> <Leader>r :QuickRun<CR>
" runner/vimproc/updatetime で出力バッファの更新間隔をミリ秒で設定できます
" updatetime が一時的に書き換えられてしまうので注意して下さい
let g:quickrun_config = {
  \   "_" : {
    \       "hook/close_unite_quickfix/enable_hook_loaded" : 1,
    \       "hook/unite_quickfix/enable_failure" : 1,
    \       "hook/close_quickfix/enable_exit" : 1,
    \       "hook/close_buffer/enable_failure" : 1,
    \       "hook/close_buffer/enable_empty_data" : 1,
    \       "outputter" : "multi:buffer:quickfix",
    \       "outputter/buffer/split" : ":botright 8sp",
    \       "runner" : "vimproc",
    \       "runner/vimproc/updatetime" : 60
      \   }
  \}

" http://qiita.com/tmsanrinsha/items/d54bee11193b2c6ea71b
  let g:quickrun_config['dot'] = {
    \ 'hook/cd/directory'              : '%S:p:h',
    \ 'command'                        : 'dot',
    \ 'cmdopt'                         : '',
    \ 'exec'                           : ['%c -T png %s -o %s:r.png', 'open %s:r.png'],
    \ 'outputter/quickfix/errorformat' : 'Error: %f: %m in line %l %.%#,%EError: %m,%C%m,%Z%m'
      \}


NeoBundle 'osyo-manga/shabadou.vim'
NeoBundle 'osyo-manga/unite-quickfix'

"------------------------------------
" for appearance
"------------------------------------

NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'Yggdroot/indentLine'
let g:indentLine_faster = 1



"------------------------------------
" for javascript
"------------------------------------
NeoBundleLazy 'jelera/vim-javascript-syntax', {
      \'autoload' : {
      \'filetypes' : ['javascript']
      \}}

"------------------------------------
" for coffeescript
"------------------------------------

NeoBundle 'kchmck/vim-coffee-script'
let g:tlist_coffee_settings = 'coffee;f:function;v:variable'

"------------------------------------
" for scala
"------------------------------------

NeoBundle 'derekwyatt/vim-scala'

"------------------------------------
" for kotlin
"------------------------------------
NeoBundle 'udalov/kotlin-vim'

"------------------------------------
" for markdown
"------------------------------------

NeoBundle 'joker1007/vim-markdown-quote-syntax'
NeoBundle 'rcmdnk/vim-markdown'

" for gnuplot
NeoBundle 'vim-scripts/gnuplot-syntax-highlighting'

" for toml
NeoBundle 'cespare/vim-toml'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
