"------------------------------------
" switch.vim
"------------------------------------

let g:clever_f_smart_case = 1
let g:clever_f_use_migemo = 1

"------------------------------------
" switch.vim
"------------------------------------

nnoremap ! :Switch<CR>

let s:switch_definition = {
      \ '*': [
      \   ['is', 'are']
      \ ],
      \ 'ruby,eruby,haml' : [
      \   ['if', 'unless'],
      \   ['while', 'until'],
      \   ['.blank?', '.present?'],
      \   ['include', 'extend'],
      \   ['class', 'module'],
      \   ['.inject', '.delete_if'],
      \   ['.map', '.map!'],
      \   ['attr_accessor', 'attr_reader', 'attr_writer'],
      \ ],
      \ 'Gemfile,Berksfile' : [
      \   ['=', '<', '<=', '>', '>=', '~>'],
      \ ],
      \ 'ruby.application_template' : [
      \   ['yes?', 'no?'],
      \   ['lib', 'initializer', 'file', 'vendor', 'rakefile'],
      \   ['controller', 'model', 'view', 'migration', 'scaffold'],
      \ ],
      \ 'erb,html,php' : [
      \   { '<!--\([a-zA-Z0-9 /]\+\)--></\(div\|ul\|li\|a\)>' : '</\2><!--\1-->' },
      \ ],
      \ 'rails' : [
      \   [100, ':continue', ':information'],
      \   [101, ':switching_protocols'],
      \   [102, ':processing'],
      \   [200, ':ok', ':success'],
      \   [201, ':created'],
      \   [202, ':accepted'],
      \   [203, ':non_authoritative_information'],
      \   [204, ':no_content'],
      \   [205, ':reset_content'],
      \   [206, ':partial_content'],
      \   [207, ':multi_status'],
      \   [208, ':already_reported'],
      \   [226, ':im_used'],
      \   [300, ':multiple_choices'],
      \   [301, ':moved_permanently'],
      \   [302, ':found'],
      \   [303, ':see_other'],
      \   [304, ':not_modified'],
      \   [305, ':use_proxy'],
      \   [306, ':reserved'],
      \   [307, ':temporary_redirect'],
      \   [308, ':permanent_redirect'],
      \   [400, ':bad_request'],
      \   [401, ':unauthorized'],
      \   [402, ':payment_required'],
      \   [403, ':forbidden'],
      \   [404, ':not_found'],
      \   [405, ':method_not_allowed'],
      \   [406, ':not_acceptable'],
      \   [407, ':proxy_authentication_required'],
      \   [408, ':request_timeout'],
      \   [409, ':conflict'],
      \   [410, ':gone'],
      \   [411, ':length_required'],
      \   [412, ':precondition_failed'],
      \   [413, ':request_entity_too_large'],
      \   [414, ':request_uri_too_long'],
      \   [415, ':unsupported_media_type'],
      \   [416, ':requested_range_not_satisfiable'],
      \   [417, ':expectation_failed'],
      \   [422, ':unprocessable_entity'],
      \   [423, ':precondition_required'],
      \   [424, ':too_many_requests'],
      \   [426, ':request_header_fields_too_large'],
      \   [500, ':internal_server_error'],
      \   [501, ':not_implemented'],
      \   [502, ':bad_gateway'],
      \   [503, ':service_unavailable'],
      \   [504, ':gateway_timeout'],
      \   [505, ':http_version_not_supported'],
      \   [506, ':variant_also_negotiates'],
      \   [507, ':insufficient_storage'],
      \   [508, ':loop_detected'],
      \   [510, ':not_extended'],
      \   [511, ':network_authentication_required'],
      \ ],
      \ 'rspec': [
      \   ['describe', 'context', 'specific', 'example'],
      \   ['before', 'after'],
      \   ['be_true', 'be_false'],
      \   ['get', 'post', 'put', 'delete'],
      \   ['==', 'eql', 'equal'],
      \   { '\.should_not': '\.should' },
      \   ['\.to_not', '\.to'],
      \   { '\([^. ]\+\)\.should\(_not\|\)': 'expect(\1)\.to\2' },
      \   { 'expect(\([^. ]\+\))\.to\(_not\|\)': '\1.should\2' },
      \ ],
      \ 'markdown' : [
      \   ['[ ]', '[x]']
      \ ]
      \ }

"------------------------------------
" vim-coffee-script
"------------------------------------

" taglistの設定 coffeeを追加
let g:tlist_coffee_settings = 'coffee;f:function;v:variable'

" 保存時にコンパイル
" autocmd BufWritePost *.coffee silent CoffeeMake! -cb | cwindow | redraw!

"}}

"------------------------------------
" indent_guides
"------------------------------------

" インデントの深さに色を付ける
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
let g:indent_guides_enable_on_vim_startup=0
let g:indent_guides_color_change_percent=20
let g:indent_guides_guide_size=1
let g:indent_guides_space_guides=1

hi IndentGuidesOdd  ctermbg=235
hi IndentGuidesEven ctermbg=237
au FileType coffee,python IndentGuidesEnable
nmap <silent><Leader>ig <Plug>IndentGuidesToggle

"------------------------------------
" quickrun
"------------------------------------

" markdownのHTML変換後にブラウザを開く

let g:quickrun_config = {}
let g:quickrun_config.markdown = {
      \ 'type': 'markdown/gfm',
      \ 'cmdopt': '-s --mathjax -c ~/.vim/github.min.css',
      \ 'outputter': 'browser'
      \ }
"------------------------------------
" neosnippet
"------------------------------------

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets, ~/.vim/snippets'

"------------------------------------
" tweetvim
"------------------------------------

let g:tweetvim_tweet_per_page = 50
let g:tweetvim_cache_size = 10
let g:tweetvim_display_source = 1
let g:tweetvim_display_time = 1
let g:tweetvim_display_icon = 1
let g:tweetvim_display_username = 1

"------------------------------------
" emmet
"------------------------------------

let g:user_emmet_settings = {
\   'lang' : 'ja'
\ }

"------------------------------------
" vim-endwise
"------------------------------------

let g:endwise_no_mappings=1

"------------------------------------
" previm
"------------------------------------

let g:previm_open_cmd = "open"
nnoremap <silent> <F7> :PrevimOpen<CR>

"------------------------------------
" ConqueTerm
"------------------------------------

let g:ConqueTerm_ReadUnfocused = 1
let g:ConqueTerm_CloseOnEnd = 1
let g:ConqueTerm_StartMessages = 0
let g:ConqueTerm_CWInsert = 1
noremap <silent> <Leader>sh :ConqueTermVSplit zsh<CR>

function! s:delete_ConqueTerm(buffer_name)
    let term_obj = conque_term#get_instance(a:buffer_name)
    call term_obj.close()
endfunction
autocmd BufWinLeave zsh\s-\s? call <SID>delete_ConqueTerm(expand('%'))

"------------------------------------
" SingleCompile
"------------------------------------

nmap <F9> :SCCompile<cr>
nmap <F10> :SCCompileRun<cr>


"------------------------------------
" vim-over
"------------------------------------

" over.vimの起動
nnoremap <silent> <Space>s :OverCommandLine %s/<CR>

" カーソル下の単語をハイライト付きで置換
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>

" コピーした文字列をハイライト付きで置換
nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>

"------------------------------------
" unite.vim
"------------------------------------

let g:unite_source_history_yank_enable = 1

" unite-grepをagに置き換え
if executable('ag')
  " Use ag in unite grep source.
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts =
  \ '-i -S --line-numbers --nogroup --hidden --ignore .git'
  let g:unite_source_grep_recursive_opt = ''
elseif executable('pt')
  " Use pt in unite grep source.
  " https://github.com/monochromegane/the_platinum_searcher
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '-i --nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
elseif executable('ack-grep')
  " Use ack in unite grep source.
  let g:unite_source_grep_command = 'ack-grep'
  let g:unite_source_grep_default_opts =
  \ '-i --no-heading --no-color -k -H'
  let g:unite_source_grep_recursive_opt = ''
endif

nnoremap [unite] <Nop>
nmap <Space>u [unite]

nnoremap <silent> [unite]u :Unite -start-insert -buffer-name=files file_mru file/async file/new<CR>
nnoremap <silent> [unite]g :Unite -start-insert -buffer-name=files file_rec/async file/new<CR>
nnoremap <silent> [unite]c :UniteWithCurrentDir -start-insert -buffer-name=files file file_mru file/async file/new<CR>
nnoremap <silent> [unite]a :Unite -start-insert grep:./<CR>
nnoremap <silent> [unite]y :Unite -start-insert history/yank<CR>
nnoremap <silent> [unite]o :Unite -start-insert outline<CR>
nnoremap <silent> [unite]h :Unite help<CR>
nnoremap <silent> [unite]f :VimFiler<CR>
nnoremap <silent> [unite]t :Unite tweetvim<CR>

nnoremap [urails] <Nop>
nmap [unite]r [urails]

nnoremap <silent> [urails]r :Unite rails/route<CR>
nnoremap <silent> [urails]m :Unite rails/model<CR>
nnoremap <silent> [urails]c :Unite rails/controller<CR>
nnoremap <silent> [urails]v :Unite rails/view<CR>

"------------------------------------
" neocomplete
"------------------------------------

" AutoComplPopというプラグインを無効化する（競合するため）
let g:acp_enableAtStartup = 0
" 起動時にneocompleteを有効化する
let g:neocomplete#enable_at_startup = 1
" 大文字小文字を区別せずに補完する
let g:neocomplete#enable_smart_cast = 1
" シンタックスを記憶する最小の文字数（変数名などが３文字以上である場合に記憶される）
let g:neocomplete#sources#syntax#min_keyword_length = 3
" neocompleteを自動的にロック（使用しない？）バッファ名のパターンを指定する。ku.vimなどneocompleteと相性の悪いプラグインを避けるため
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" キャメルケース補完
"let g:neocomplete_enable_camel_case_completion = 1
" スネークケース補完
"let g:neocomplete_enable_underbar_completion = 1

" ファイルタイプごとに独自のディクショナリを追加する
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }


" オリジナルのキーワードを定義する
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" 補完キャンセル
inoremap <expr><C-g>     neocomplete#undo_completion()
" 補完候補から共通する部分を補完する
inoremap <expr><C-l>     neocomplete#complete_common_string()

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" 文字削除時にポップアップを閉じる<BS> = BackSpace
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" 現在選択している候補を確定する
inoremap <expr><C-y>  neocomplete#close_popup()
" 選択をキャンセルし、ポップアップを閉じる
inoremap <expr><C-e>  neocomplete#cancel_popup()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=nodejscomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
