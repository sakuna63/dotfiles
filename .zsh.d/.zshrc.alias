echo 'load .zshrc.alias'

### Shortcuts

alias so='source'
alias re='source ~/.zshrc'
alias ag='ag -a --hidden -f -i'

alias dm="cd ~/Documents"
alias dl="cd ~/Downloads"
alias dt="cd ~/Desktop"
alias dv="cd ~/Develop"
alias dr="cd ~/Dropbox"


### man
if [ -e /Applications/Dash.localized/Dash.app -o -e /Applications/Dash.app ]; then
  function man_dash() { open "dash://m:$1" };
  alias m="man_dash"
else
  alias m=man
fi

### v,vim
if which vimx >/dev/null 2>&1; then
  alias vim=vimx
fi
alias v=vim

### rm
if which rmtrash >/dev/null 2>&1; then
  alias rm=rmtrash
elif which trash-put >/dev/null 2>&1; then
  alias rm=trash-put
fi

### o,open
if which open >/dev/null 2>&1; then
  alias o=open
elif which xdg-open >/dev/null 2>&1; then
  alias open=xdg-open
  alias o=xdg-open
fi

### Homebrew
alias cask='brew cask'

### android
function find_device()
{
  count=`adb devices | sed '/^$/d' | wc -l`
  if [ $count -le 2 ]; then
    adb devices | sed -e "1,1d" | cut -f 1
  else
    adb devices | sed -e "1,1d" | peco | cut -f 1
  fi
}

function adb-capture()
{
  local device=`find_device`
  local name=${1:-screenshot.png}
  adb -s $device shell screencap -p /sdcard/$name
  adb -s $device pull /sdcard/$name
  adb -s $device shell rm /sdcard/$name

  if which mogrify >/dev/null 2>&1; then
    mogrify -resize ${2:-50}% $name
  fi
}
alias adb-record='adbp shell screenrecord /sdcard/record.mp4; adbp pull /sdcard/record.mp4'
alias adb-restart='adb kill-server; adb start-server'
alias adb-uninstall='adbp shell pm list package | sed -e s/package:// | peco | xargs adbp uninstall'
alias adb-install='find . -name "*.apk" | peco | xargs adbp install -r'

function gradlew() {
  # find 'gradlew' file
  local base_dir='.'
  if git rev-parse >/dev/null 2>&1; then
    base_dir="`git rev-parse --show-toplevel`"
  fi
  local path_to_gradlew=`find $base_dir -name gradlew`

  # execute gradle tasks($@)
  $path_to_gradlew $@
}
alias glo='gradlew'
alias gl='gradlew --offline'
alias glp='gradlew --profile --offline'

function deapk() {
  local dst=${1%.*}
  unzip $1 -d $dst
  d2j-dex2jar ${dst}/classes.dex
  unzip ${dst}/classes_dex2jar.jar -d ${dst}/Classes
  for d in `ls $dst`;
  do
    jad -8 -s java -d Srcs -r $1/$d/**/*.class
  done
}

### git
alias g='git'

alias t='tig'
alias ts='tig status'
alias tst='tig stash'
alias tb='tig blame'
alias tg='tig grep'
alias trf='tig refs'

alias gbw='hub browse'
alias gpr='hub pull-request'

alias ghqc='cd $(ghq list -p | peco)'
alias ghqo='gh-open $(ghq list -p | peco)'

### update
update() {
  if which brew >/dev/null 2>&1; then
    brew update; brew upgrade -all; /bin/rm -rf $(brew --cache); brew cleanup -s; brew linkapps
  fi

  if which gem >/dev/null 2>&1; then
    sudo gem update --system --no-document
    sudo gem update --no-document
  fi

  if which antigen >/dev/null 2>&1; then
    antigen update
  fi

  if which apt-get >/dev/null 2>&1; then
    sudo apt-get update; sudo yum upgrade
  fi

  if which yum >/dev/null 2>&1; then
    sudo yum update; sudo yum upgrade
  fi

  if which pip >/dev/null 2>&1; then
    pip install --upgrade pip
    pip freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs pip install -U
  fi

  if which pip2 >/dev/null 2>&1; then
    pip2 install --upgrade pip
    pip2 freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs pip2 install -U
  fi

  if which pip3 >/dev/null 2>&1; then
    pip3 install --upgrade pip
    pip3 freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs pip3 install -U
  fi
}

if which peco > /dev/null; then
  # pecoでコマンド履歴を検索できるようにする
  function peco-select-history() {
    local tac
    if which tac > /dev/null; then
      tac="tac"
    else
      tac="tail -r"
    fi
    BUFFER=$(fc -l -n 1| \
      eval $tac | \
      peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
  }
  zle -N peco-select-history
  bindkey -r '^r'
  bindkey '^r' peco-select-history

  # pecoでディレクトリの移動履歴を見れるように
  function peco-cdr() {
    local selected_dir=$(cdr -l | awk '{ print $2 }' | peco)
    if [ -n "$selected_dir" ]; then
      BUFFER="cd ${selected_dir}"
      zle accept-line
    fi
    zle clear-screen
  }
  zle -N peco-cdr
  bindkey -r '^u'
  bindkey '^u' peco-cdr
fi


# 's'end 'f'ile to 'e'vernote
function sfe()
{
  if [ $# -eq 0 ]; then
    echo "Usege: sfe path_to_file"
    return
  fi

  ptf="$1"
  osascript -l JavaScript -e "
  app = Application('com.evernote.Evernote');
  app.createNote({
  withText: ' ',
  title: '`basename $ptf`',
  attachments: '`greadlink -f $ptf`'
});
"
}

### peco

########################
###   global alias   ###
########################


alias -g A='| awk'
alias -g B='`git branch | peco | head -n 1 | sed -e "s/^\*[ ]*//g"`'
alias -g E='2>&1 > /dev/null'
alias -g G='| grep'
alias -g GF='git ls-files | peco'
alias -g N='> /dev/null'
alias -g P='| peco'
alias -g PP='| peco | pbcopy'
alias -g S='| sed'
alias -g T='| tail'
alias -g W='| wc'
alias -g X='| xargs'

### C
if which pbcopy >/dev/null 2>&1 ; then
    # Mac
    alias -g C='| pbcopy'
elif which xsel >/dev/null 2>&1 ; then
    # Linux
    alias -g C='| xsel --input --clipboard'
elif which putclip >/dev/null 2>&1 ; then
    # Cygwin
    alias -g C='| putclip'
fi

########################
###   suffix alias   ###
########################

alias -s {rb}='ruby'
function extract() {
  case $1 in
    *.tar.gz|*.tgz) tar xzvf $1;;
    *.tar.xz) tar Jxvf $1;;
    *.zip) unzip $1;;
    *.lzh) lha e $1;;
    *.tar.bz2|*.tbz) tar xjvf $1;;
    *.tar.Z) tar zxvf $1;;
    *.gz) gzip -d $1;;
    *.bz2) bzip2 -dc $1;;
    *.Z) uncompress $1;;
    *.tar) tar xvf $1;;
    *.arj) unarj $1;;
  esac
}
alias -s {gz,tgz,zip,lzh,bz2,tbz,Z,tar,arj,xz}=extract
